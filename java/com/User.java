package com;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class User extends Contract {
    public static final String[] BINARY_ARRAY = {"","00028152600401610c4b9291906165d6565b600060405180830381600087803b158015610c6557600080fd5b505af1158015610c79573d6000803e3d6000fd5b50505050610c85615151565b73ffffffffffffffffffffffffffffffffffffffff1663ec18665d82846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cdb929190616823565b600060405180830381600087803b158015610cf557600080fd5b505af1158015610d09573d6000803e3d6000fd5b505050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610d5f57602002820191906000526020600020905b815481526020019060010190808311610d4b575b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e9c6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e895780601f10610e5e57610100808354040283529160200191610e89565b820191906000526020600020905b815481529060010190602001808311610e6c57829003601f168201915b505050505061504690919063ffffffff16565b901515610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed69190616801565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ff36040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fe05780601f10610fb557610100808354040283529160200191610fe0565b820191906000526020600020905b815481529060010190602001808311610fc357829003601f168201915b505050505061504690919063ffffffff16565b901515611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d9190616801565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6110ff615151565b73ffffffffffffffffffffffffffffffffffffffff1663e0b3d83c8383866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111579392919061676d565b60206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111a791908101906161b8565b15156113525760006111b7615112565b73ffffffffffffffffffffffffffffffffffffffff166347d06153856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161120b9190616464565b60206040518083038186803b15801561122357600080fd5b505afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061125b919081019061624b565b9050611265615112565b73ffffffffffffffffffffffffffffffffffffffff16634bb75bf08561129560018561518190919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112ce929190616606565b600060405180830381600087803b1580156112e857600080fd5b505af11580156112fc573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fc6f83b7b2d19b0fcc2cba9d7251b2d607d566fde09f4d53fd69757a10996a6808484604051611348929190616749565b60405180910390a2505b505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061139e615112565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113f29190616464565b60206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611442919081019061624b565b9050919050565b6000841161152f6040805190810160405280600f81526020017f3a2073697a65206d757374203e2030000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561151c5780601f106114f15761010080835404028352916020019161151c565b820191906000526020600020905b8154815290600101906020018083116114ff57829003601f168201915b505050505061504690919063ffffffff16565b901515611572576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115699190616801565b60405180910390fd5b5061157b615016565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156115dc57600080fd5b505afa1580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611614919081019061624b565b8282905011156116fc6040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116e95780601f106116be576101008083540402835291602001916116e9565b820191906000526020600020905b8154815290600101906020018083116116cc57829003601f168201915b505050505061504690919063ffffffff16565b90151561173f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117369190616801565b60405180910390fd5b50611748615016565b73ffffffffffffffffffffffffffffffffffffffff1663b1ad09f76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156117a957600080fd5b505afa1580156117bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117e1919081019061624b565b8686905011156118c96040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118b65780601f1061188b576101008083540402835291602001916118b6565b820191906000526020600020905b81548152906001019060200180831161189957829003601f168201915b505050505061504690919063ffffffff16565b90151561190c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119039190616801565b60405180910390fd5b50611915615112565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48888886040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161196d939291906164b6565b60206040518083038186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119bd91908101906161b8565b15611aa06040805190810160405280600c81526020017f3a2066696c65206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a8d5780601f10611a6257610100808354040283529160200191611a8d565b820191906000526020600020905b815481529060010190602001808311611a7057829003601f168201915b505050505061504690919063ffffffff16565b901515611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada9190616801565b60405180910390fd5b5083611aed615112565b73ffffffffffffffffffffffffffffffffffffffff16637b7483fe896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b419190616464565b60206040518083038186803b158015611b5957600080fd5b505afa158015611b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b91919081019061624b565b1015611c756040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c625780601f10611c3757610100808354040283529160200191611c62565b8201","91906000526020600020905b815481529060010190602001808311611c4557829003601f168201915b505050505061504690919063ffffffff16565b901515611cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caf9190616801565b60405180910390fd5b50611cc1615121565b73ffffffffffffffffffffffffffffffffffffffff1663d9a19302886000898960405180838380828437808301925050509250505060405180910390206040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611d389392919061647f565b600060405180830381600087803b158015611d5257600080fd5b505af1158015611d66573d6000803e3d6000fd5b50505050611d72615151565b73ffffffffffffffffffffffffffffffffffffffff1663b0fe21828787878b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611dcc949392919061679f565b600060405180830381600087803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b50505050611e06615112565b73ffffffffffffffffffffffffffffffffffffffff16633e14fc1b888888878787426040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e669796959493929190616571565b600060405180830381600087803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b5050505050505050505050565b611ea9615112565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611efd9190616464565b602060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f4f91908101906161b8565b156120326040805190810160405280600c81526020017f3a2075736572206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561201f5780601f10611ff45761010080835404028352916020019161201f565b820191906000526020600020905b81548152906001019060200180831161200257829003601f168201915b505050505061504690919063ffffffff16565b901515612075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206c9190616801565b60405180910390fd5b5061207e615016565b73ffffffffffffffffffffffffffffffffffffffff16630c360f0a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156120df57600080fd5b505afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612117919081019061624b565b8282905011156121ff6040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ec5780601f106121c1576101008083540402835291602001916121ec565b820191906000526020600020905b8154815290600101906020018083116121cf57829003601f168201915b505050505061504690919063ffffffff16565b901515612242576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122399190616801565b60405180910390fd5b5061224b615112565b73ffffffffffffffffffffffffffffffffffffffff16635f4cfd598461226f615016565b73ffffffffffffffffffffffffffffffffffffffff16635406cbe96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156122d057600080fd5b505afa1580156122e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612308919081019061624b565b85856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612345949392919061662f565b600060405180830381600087803b15801561235f57600080fd5b505af1158015612373573d6000803e3d6000fd5b50505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156124b26040805190810160405280601181526020017f3a2053746f72616765206e6f742073657400000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561249f5780601f106124745761010080835404028352916020019161249f565b820191906000526020600020905b81548152906001019060200180831161248257829003601f168201915b505050505061504690919063ffffffff16565b9015156124f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ec9190616801565b60405180910390fd5b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000612528615151565b73ffffffffffffffffffffffffffffffffffffffff1663deda606684846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161257e929190616749565b60206040518083038186803b15801561259657600080fd5b505afa1580156125aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125ce919081019061624b565b90506125da85826151d8565b8473ffffffffffffffffffffffffffffffffffffffff167f14a51c77a00d5c4c3ccc7a4df74f169088c4d4d04859d176729645e53c7b895c8484604051612622929190616749565b60405180910390a25050505050565b600061263b615112565b73ffffffffffffffffffffffffffffffffffffffff166347534dac6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561269c57600080fd5b505afa1580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126d4919081019061624b565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612709615112565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161275d9190616464565b602060405180830381600087803b15801561277757600080fd5b505af115801561278b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127af91908101906161b8565b9050919050565b6127be615112565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016128129190616464565b602060405180830381600087803b15801561282c57600080fd5b505af1158015612840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061286491908101906161b8565b6129466040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129335780601f1061290857610100808354040283529160200191612933565b820191906000526020600020905b81548152906001019060200180831161291657829003601f168201915b505050505061504690919063ffffffff16565b901515612989576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129809190616801565b60405180910390fd5b50612992615112565b73ffffffffffffffffffffffffffffffffffffffff16637ab71c2d826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016129e69190616464565b60206040518083038186803b1580156129fe57600080fd5b505afa158015612a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a36919081019061624b565b600014612b1b6040805190810160405280601181526020017f3a2066696c6573206e6f7420656d70747900000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b085780601f10612add57610100808354040283529160200191612b08565b820191906000526020600020905b815481529060010190602001808311612aeb57829003601f168201915b505050505061504690919063ffffffff16565b901515612b5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b559190616801565b60405180910390fd5b50612b67615112565b73ffffffffffffffffffffffffffffffffffffffff16635c60f226826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612bbb9190616464565b600060405180830381600087803b158015612bd557600080fd5b505af1158015612be9573d6000803e3d6000fd5b5050505050565b612bf8615112565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000","000000028152600401612c4c9190616464565b602060405180830381600087803b158015612c6657600080fd5b505af1158015612c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c9e91908101906161b8565b612d806040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612d6d5780601f10612d4257610100808354040283529160200191612d6d565b820191906000526020600020905b815481529060010190602001808311612d5057829003601f168201915b505050505061504690919063ffffffff16565b901515612dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dba9190616801565b60405180910390fd5b50612dcc615112565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e209190616464565b60206040518083038186803b158015612e3857600080fd5b505afa158015612e4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e70919081019061624b565b811015612f3960606040519081016040528060228152602001616b046022913960008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f265780601f10612efb57610100808354040283529160200191612f26565b820191906000526020600020905b815481529060010190602001808311612f0957829003601f168201915b505050505061504690919063ffffffff16565b901515612f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f739190616801565b60405180910390fd5b50612f85615112565b73ffffffffffffffffffffffffffffffffffffffff1663a19eaf7383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612fdb929190616606565b600060405180830381600087803b158015612ff557600080fd5b505af1158015613009573d6000803e3d6000fd5b505050505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130a75780601f1061307c576101008083540402835291602001916130a7565b820191906000526020600020905b81548152906001019060200180831161308a57829003601f168201915b505050505081565b60006130b9615112565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161310d9190616464565b60206040518083038186803b15801561312557600080fd5b505afa158015613139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061315d919081019061624b565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132976040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156132845780601f1061325957610100808354040283529160200191613284565b820191906000526020600020905b81548152906001019060200180831161326757829003601f168201915b505050505061504690919063ffffffff16565b9015156132da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d19190616801565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321f8a721826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016133529190616713565b60206040518083038186803b15801561336a57600080fd5b505afa15801561337e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133a29190810190615df3565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613450615112565b73ffffffffffffffffffffffffffffffffffffffff16634dfefc4b866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016134a49190616464565b602060405180830381600087803b1580156134be57600080fd5b505af11580156134d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506134f691908101906161b8565b6135d86040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135c55780601f1061359a576101008083540402835291602001916135c5565b820191906000526020600020905b8154815290600101906020018083116135a857829003601f168201915b505050505061504690919063ffffffff16565b90151561361b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136129190616801565b60405180910390fd5b50613624615112565b73ffffffffffffffffffffffffffffffffffffffff16633d55f9a48686866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161367c939291906164b6565b60206040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506136cc91908101906161b8565b6137ae6040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561379b5780601f106137705761010080835404028352916020019161379b565b820191906000526020600020905b81548152906001019060200180831161377e57829003601f168201915b505050505061504690919063ffffffff16565b9015156137f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137e89190616801565b60405180910390fd5b506137fa615016565b73ffffffffffffffffffffffffffffffffffffffff16634fdbb0026040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561385b57600080fd5b505afa15801561386f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613893919081019061624b565b82829050111561397b6040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139685780601f1061393d57610100808354040283529160200191613968565b820191906000526020600020905b81548152906001019060200180831161394b57829003601f168201915b505050505061504690919063ffffffff16565b9015156139be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139b59190616801565b60405180910390fd5b506139c7615112565b73ffffffffffffffffffffffffffffffffffffffff16638e04d4f986868686866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613a239594939291906164e8565b600060405180830381600087803b158015613a3d57600080fd5b505af1158015613a51573d6000803e3d6000fd5b505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613b8f6040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b7c5780601f10613b5157610100808354040283529160200191613b7c565b820191906000526020600020905b815481529060010190602001808311613b5f57829003601f168201915b505050505061504690919063ffffffff16565b901515613bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bc99190616801565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f85a70e3ed8a3924b3769cbe4e925987bbd40e8cea3","","ffff167c0100000000000000000000000000000000000000000000000000000000028152600401614c6a9190616713565b60206040518083038186803b158015614c8257600080fd5b505afa158015614c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614cba9190810190615df3565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614bc8565b50565b60606000614d28615112565b73ffffffffffffffffffffffffffffffffffffffff1663d752b4ea8686866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d809392919061666f565b60006040518083038186803b158015614d9857600080fd5b505afa158015614dac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614dd59190810190616164565b91509150935093915050565b6060614deb615112565b73ffffffffffffffffffffffffffffffffffffffff1663d962c33b836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614e3f9190616464565b60006040518083038186803b158015614e5757600080fd5b505afa158015614e6b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614e94919081019061620a565b9050919050565b6060614ea5615112565b73ffffffffffffffffffffffffffffffffffffffff1663e2948e3f8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614efd939291906164b6565b60006040518083038186803b158015614f1557600080fd5b505afa158015614f29573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250614f52919081019061620a565b90509392505050565b6000614f65615112565b73ffffffffffffffffffffffffffffffffffffffff1663f71b7abf8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614fbd939291906164b6565b60206040518083038186803b158015614fd557600080fd5b505afa158015614fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061500d919081019061624b565b90509392505050565b60006150417f53657474696e670000000000000000000000000000000000000000000000000061584a565b905090565b606082826040516020018083805190602001908083835b602083101515615082578051825260208201915060208101905060208303925061505d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156150d557805182526020820191506020810190506020830392506150b0565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600061511c61237c565b905090565b600061514c7f486973746f72790000000000000000000000000000000000000000000000000061584a565b905090565b600061517c7f46696c650000000000000000000000000000000000000000000000000000000061584a565b905090565b60008082840190508381101515156151ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016151c590616853565b60405180910390fd5b8091505092915050565b60006151e2615112565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152369190616464565b60206040518083038186803b15801561524e57600080fd5b505afa158015615262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615286919081019061624b565b90506000615292615112565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152e69190616464565b60206040518083038186803b1580156152fe57600080fd5b505afa158015615312573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615336919081019061624b565b90506000831180156153485750818311155b61540e60606040519081016040528060248152602001616abf6024913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156153fb5780601f106153d0576101008083540402835291602001916153fb565b820191906000526020600020905b8154815290600101906020018083116153de57829003601f168201915b505050505061504690919063ffffffff16565b901515615451576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016154489190616801565b60405180910390fd5b5061545a615112565b73ffffffffffffffffffffffffffffffffffffffff1663f48d84c2856154898686615a1290919063ffffffff16565b6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016154c2929190616606565b600060405180830381600087803b1580156154dc57600080fd5b505af11580156154f0573d6000803e3d6000fd5b5050505050505050565b6000615504615112565b73ffffffffffffffffffffffffffffffffffffffff16632441ac7b846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155589190616464565b60206040518083038186803b15801561557057600080fd5b505afa158015615584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506155a8919081019061624b565b905060006155b4615112565b73ffffffffffffffffffffffffffffffffffffffff16637e51ef29856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016156089190616464565b60206040518083038186803b15801561562057600080fd5b505afa158015615634573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615658919081019061624b565b905060008311801561567c575080615679848461518190919063ffffffff16565b11155b61575e6040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561574b5780601f106157205761010080835404028352916020019161574b565b820191906000526020600020905b81548152906001019060200180831161572e57829003601f168201915b505050505061504690919063ffffffff16565b9015156157a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016157989190616801565b60405180910390fd5b506157aa615112565b73ffffffffffffffffffffffffffffffffffffffff1663f48d84c2856157d9868661518190919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401615812929190616606565b600060405180830381600087803b15801561582c57600080fd5b505af1158015615840573d6000803e3d6000fd5b5050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156159936040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561597f5780601f106159545761010080835404028352916020019161597f565b820191906000526020600020905b81548152906001019060200180831161596257829003601f168201915b5050505050615a5c9092919063ffffffff16565b9015156159d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016159cd9190616801565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000615a5483836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615b31565b905092915050565b60608383836040516020018084805190602001908083835b602083101515615a995780518252602082019150602081019050602083039250615a74565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515615aec5780518252602082019150602081019050602083039250615ac7565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008383111582901515615b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401615b729190616801565b60405180910390fd5b5060008385039050809150509392505050565b6000615b9a8235616a03565b905092915050565b6000615bae8251616a03565b905092915050565b600082601f8301121515615bc957600080fd5b8151615bdc615bd7826168bb565b61688e565b9150818183526020840193506020810190508360005b83811015615c225781518601615c088882615ca0565b845260208401935060208301925050600181019050615bf2565b5050505092915050565b6000615c388251616a15565b90","5092915050565b6000615c4c8235616a21565b905092915050565b60008083601f8401121515615c6857600080fd5b8235905067ffffffffffffffff811115615c8157600080fd5b602083019150836001820283011115615c9957600080fd5b9250929050565b600082601f8301121515615cb357600080fd5b8151615cc6615cc1826168e3565b61688e565b91508082526020830160208301858383011115615ce257600080fd5b615ced838284616a7a565b50505092915050565b600082601f8301121515615d0957600080fd5b8135615d1c615d178261690f565b61688e565b91508082526020830160208301858383011115615d3857600080fd5b615d43838284616a6b565b50505092915050565b600082601f8301121515615d5f57600080fd5b8151615d72615d6d8261690f565b61688e565b91508082526020830160208301858383011115615d8e57600080fd5b615d99838284616a7a565b50505092915050565b6000615dae8235616a2b565b905092915050565b6000615dc28251616a2b565b905092915050565b600060208284031215615ddc57600080fd5b6000615dea84828501615b8e565b91505092915050565b600060208284031215615e0557600080fd5b6000615e1384828501615ba2565b91505092915050565b60008060008060608587031215615e3257600080fd5b6000615e4087828801615b8e565b9450506020615e5187828801615b8e565b935050604085013567ffffffffffffffff811115615e6e57600080fd5b615e7a87828801615c54565b925092505092959194509250565b600080600060408486031215615e9d57600080fd5b6000615eab86828701615b8e565b935050602084013567ffffffffffffffff811115615ec857600080fd5b615ed486828701615c54565b92509250509250925092565b600080600080600060608688031215615ef857600080fd5b6000615f0688828901615b8e565b955050602086013567ffffffffffffffff811115615f2357600080fd5b615f2f88828901615c54565b9450945050604086013567ffffffffffffffff811115615f4e57600080fd5b615f5a88828901615c54565b92509250509295509295909350565b60008060008060608587031215615f7f57600080fd5b6000615f8d87828801615b8e565b945050602085013567ffffffffffffffff811115615faa57600080fd5b615fb687828801615c54565b93509350506040615fc987828801615da2565b91505092959194509250565b600080600080600080600060a0888a031215615ff057600080fd5b6000615ffe8a828b01615b8e565b975050602088013567ffffffffffffffff81111561601b57600080fd5b6160278a828b01615c54565b9650965050604061603a8a828b01615da2565b945050606061604b8a828b01615da2565b935050608088013567ffffffffffffffff81111561606857600080fd5b6160748a828b01615c54565b925092505092959891949750929550565b6000806040838503121561609857600080fd5b60006160a685828601615b8e565b925050602083013567ffffffffffffffff8111156160c357600080fd5b6160cf85828601615cf6565b9150509250929050565b600080604083850312156160ec57600080fd5b60006160fa85828601615b8e565b925050602061610b85828601615da2565b9150509250929050565b60008060006060848603121561612a57600080fd5b600061613886828701615b8e565b935050602061614986828701615da2565b925050604061615a86828701615da2565b9150509250925092565b6000806040838503121561617757600080fd5b600083015167ffffffffffffffff81111561619157600080fd5b61619d85828601615bb6565b92505060206161ae85828601615c2c565b9150509250929050565b6000602082840312156161ca57600080fd5b60006161d884828501615c2c565b91505092915050565b6000602082840312156161f357600080fd5b600061620184828501615c40565b91505092915050565b60006020828403121561621c57600080fd5b600082015167ffffffffffffffff81111561623657600080fd5b61624284828501615d4c565b91505092915050565b60006020828403121561625d57600080fd5b600061626b84828501615db6565b91505092915050565b61627d8161699b565b82525050565b600061628e82616955565b8084526020840193506162a08361693b565b60005b828110156162d2576162b686835161635b565b6162bf82616981565b91506020860195506001810190506162a3565b50849250505092915050565b60006162e982616960565b8084526020840193508360208202850161630285616948565b60005b8481101561633b57838303885261631d8383516163e8565b92506163288261698e565b9150602088019750600181019050616305565b508196508694505050505092915050565b616355816169ad565b82525050565b616364816169b9565b82525050565b61637381616a35565b82525050565b61638281616a59565b82525050565b600082845260208401935061639e838584616a6b565b6163a783616aad565b840190509392505050565b60006163bd82616976565b8084526163d1816020860160208601616a7a565b6163da81616aad565b602085010191505092915050565b60006163f38261696b565b808452616407816020860160208601616a7a565b61641081616aad565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b61645e816169f9565b82525050565b60006020820190506164796000830184616274565b92915050565b60006060820190506164946000830186616274565b6164a16020830185616379565b6164ae604083018461635b565b949350505050565b60006040820190506164cb6000830186616274565b81810360208301526164de818486616388565b9050949350505050565b60006060820190506164fd6000830188616274565b8181036020830152616510818688616388565b90508181036040830152616525818486616388565b90509695505050505050565b60006060820190506165466000830187616274565b8181036020830152616559818587616388565b90506165686040830184616455565b95945050505050565b600060a082019050616586600083018a616274565b818103602083015261659981888a616388565b90506165a86040830187616455565b81810360608301526165bb818587616388565b90506165ca6080830184616455565b98975050505050505050565b60006040820190506165eb6000830185616274565b81810360208301526165fd81846163b2565b90509392505050565b600060408201905061661b6000830185616274565b6166286020830184616455565b9392505050565b60006060820190506166446000830187616274565b6166516020830186616455565b8181036040830152616664818486616388565b905095945050505050565b60006060820190506166846000830186616274565b6166916020830185616455565b61669e6040830184616455565b949350505050565b600060208201905081810360008301526166c08184616283565b905092915050565b600060408201905081810360008301526166e281856162de565b90506166f1602083018461634c565b9392505050565b600060208201905061670d600083018461634c565b92915050565b6000602082019050616728600083018461635b565b92915050565b6000602082019050616743600083018461636a565b92915050565b60006020820190508181036000830152616764818486616388565b90509392505050565b60006040820190508181036000830152616788818587616388565b90506167976020830184616274565b949350505050565b600060608201905081810360008301526167ba818688616388565b90506167c96020830185616455565b6167d66040830184616274565b95945050505050565b600060208201905081810360008301526167f981846163e8565b905092915050565b6000602082019050818103600083015261681b81846163b2565b905092915050565b6000604082019050818103600083015261683d81856163b2565b905061684c6020830184616274565b9392505050565b6000602082019050818103600083015261686c8161641e565b9050919050565b60006020820190506168886000830184616455565b92915050565b6000604051905081810181811067ffffffffffffffff821117156168b157600080fd5b8060405250919050565b600067ffffffffffffffff8211156168d257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156168fa57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561692657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006169a6826169d9565b9050919050565b60008115159050919050565b6000819050919050565b60006002821015156169d157fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000616a0e826169d9565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000616a4082616a47565b9050919050565b6000616a52826169d9565b9050919050565b6000616a64826169c3565b9050919050565b82818337600083830152505050565b60005b83811015616a98578082015181840152602081019050616a7d565b83811115616aa7576000848401525b50505050565b6000601f19601f830116905091905056fe667265652073697a652063616e206e6f7420626967207468616e20757365642073697a653a206e6577206d616e6167657220697320746865207a65726f20616464726573733a2063616e206e6f74206c6974746c65207468616e2073746f726167652075736564a265627a7a723058205cf6b3c1d70e90790b3f112892fb3d22a9be8cf54bcbb72643a2434e06b429846c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405160208062006f25833981018060405262000033919081019062000342565b8033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001327f5573657200000000000000000000000000000000000000000000000000000000620001c8640100000000026401000000009004565b6060604051908101604052807f53657474696e670000000000000000000000000000000000000000000000000081526020017f46696c650000000000000000000000000000000000000000000000000000000081526020017f486973746f7279000000000000000000000000000000000000000000000000008152506004906003620001c092919062000203565b5050620003b6565b806040516020018082815260200191505060405160208183030381529060405260009080519060200190620001ff92919062000255565b5050565b82805482825590600052602060002090810192821562000242579160200282015b828111156200024157825182559160200191906001019062000224565b5b509050620002519190620002dc565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200029857805160ff1916838001178555620002c9565b82800160010185558215620002c9579182015b82811115620002c8578251825591602001919060010190620002ab565b5b509050620002d8919062000304565b5090565b6200030191905b80821115620002fd576000816000905550600101620002e3565b5090565b90565b6200032991905b80821115620003255760008160009055506001016200030b565b5090565b90565b60006200033a8251620003a2565b905092915050565b6000602082840312156200035557600080fd5b600062000365848285016200032c565b91505092915050565b60006200037b8262000382565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003af826200036e565b9050919050565b616b5f80620003c66000396000f3fe6080604052600436106101f5576000357c0100000000000000000000000000000000000000000000000000000000900480637d0722521161011f578063c116b3ba116100b2578063dd5e5c0111610081578063dd5e5c01146106e7578063e461abb614610725578063f9de6e851461074e578063facc639614610765576101f5565b8063c116b3ba14610619578063c14bb7f914610656578063c22931691461067f578063d0613a5f146106aa576101f5565b8063ab3da81c116100ee578063ab3da81c1461054b578063b722765a14610588578063bf46bf65146105b3578063c0c22a62146105dc576101f5565b80637d072252146104a7578063856101ec146104d057806391726a99146104f9578063977b659014610522576101f5565b8063489b5766116101975780636e1f75ad116101665780636e1f75ad146103d95780636f0eae41146104045780637279e3cd1461042d57806376e1fbb21461046a576101f5565b8063489b5766146103315780635089e2c81461035c5780636b58506b146103875780636bddd7ba146103b0576101f5565b806319d30ca3116101d357806319d30ca3146102775780631db0dbc9146102a05780633a52a796146102cb5780633eab5fba146102f4576101f5565b806305282c70146101fa5780630ec991c21461022357806310faa2de1461024e575b600080fd5b34801561020657600080fd5b50610221600480360361021c9190810190615dca565b61078e565b005b34801561022f57600080fd5b50610238610b1c565b6040516102459190616464565b60405180910390f35b34801561025a57600080fd5b5061027560048036036102709190810190615e1c565b610b42565b005b34801561028357600080fd5b5061029e60048036036102999190810190615e1c565b610d0c565b005b3480156102ac57600080fd5b506102b5610e1f565b6040516102c291906166a6565b60405180910390f35b3480156102d757600080fd5b506102f260048036036102ed9190810190615ee0565b610e77565b005b34801561030057600080fd5b5061031b60048036036103169190810190615dca565b61148b565b6040516103289190616801565b60405180910390f35b34801561033d57600080fd5b50610346611545565b6040516103539190616873565b60405180910390f35b34801561036857600080fd5b506103716115ed565b60405161037e9190616464565b60405180910390f35b34801561039357600080fd5b506103ae60048036036103a991908101906161e1565b611613565b005b3480156103bc57600080fd5b506103d760048036036103d29190810190615f69565b6118d1565b005b3480156103e557600080fd5b506103ee611d15565b6040516103fb9190616464565b60405180910390f35b34801561041057600080fd5b5061042b600480360361042691908101906160d9565b611eb7565b005b34801561043957600080fd5b50610454600480360361044f9190810190615dca565b6122d8565b6040516104619190616873565b60405180910390f35b34801561047657600080fd5b50610491600480360361048c9190810190615e88565b61238d565b60405161049e9190616873565b60405180910390f35b3480156104b357600080fd5b506104ce60048036036104c99190810190616085565b612448565b005b3480156104dc57600080fd5b506104f760048036036104f29190810190615e88565b6129a5565b005b34801561050557600080fd5b50610520600480360361051b9190810190615dca565b612e80565b005b34801561052e57600080fd5b5061054960048036036105449190810190615e88565b6131f2565b005b34801561055757600080fd5b50610572600480360361056d9190810190615e88565b61362a565b60405161057f9190616801565b60405180910390f35b34801561059457600080fd5b5061059d6136ea565b6040516105aa919061672e565b60405180910390f35b3480156105bf57600080fd5b506105da60048036036105d59190810190615dca565b613710565b005b3480156105e857600080fd5b5061060360048036036105fe91908101906161e1565b613b4a565b6040516106109190616464565b60405180910390f35b34801561062557600080fd5b50610640600480360361063b9190810190615dca565b613b87565b60405161064d91906166f8565b60405180910390f35b34801561066257600080fd5b5061067d60048036036106789190810190615e88565b613c3e565b005b34801561068b57600080fd5b50610694613e9e565b6040516106a191906167df565b60405180910390f35b3480156106b657600080fd5b506106d160048036036106cc9190810190615dca565b613f3c565b6040516106de9190616873565b60405180910390f35b3480156106f357600080fd5b5061070e60048036036107099190810190616115565b613ff1565b60405161071c9291906166c8565b60405180910390f35b34801561073157600080fd5b5061074c60048036036107479190810190615fd5565b6140b6565b005b34801561075a57600080fd5b50610763614b0e565b005b34801561077157600080fd5b5061078c60048036036107879190810190615dca565b614ddf565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108c16040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ae5780601f10610883576101008083540402835291602001916108ae565b820191906000526020600020905b81548152906001019060200180831161089157829003601f168201915b505050505061501690919063ffffffff16565b901515610904576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016108fb9190616801565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a186040805190810160405280601f81526020017f3a206e6577206f776e657220697320746865207a65726f20616464726573730081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a055780601f106109da57610100808354040283529160200191610a05565b820191906000526020600020905b8154815290600101906020018083116109e857829003601f168201915b505050505061501690919063ffffffff16565b901515610a5b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a529190616801565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7725da6dd96c2abfc02db25a96954769333dd2f6bbb9fe1b549e24da7a12ff1160405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b4a6150e2565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd8383876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ba29392919061676d565b60206040518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bf291908101906161b8565b1515610d06576000610c026150e2565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c010000000000000000000000000000","0000000000000000000000000000028152600401610c58929190616749565b60206040518083038186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ca8919081019061624b565b9050610cb48582615112565b8473ffffffffffffffffffffffffffffffffffffffff167f6f411a893c5fa52ce58a412de25a2950f640906d934006f21bf08aa2552af5b88484604051610cfc929190616749565b60405180910390a2505b50505050565b6000610d166150e2565b73ffffffffffffffffffffffffffffffffffffffff16639bd7613684846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d6c929190616749565b60206040518083038186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dbc919081019061624b565b9050610dc88582615462565b8473ffffffffffffffffffffffffffffffffffffffff167fe89d203d7f352b2dce5ab22578a1506f4dd0ec30c398151d94c52d422608c7bb8484604051610e10929190616749565b60405180910390a25050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015610e6d57602002820191906000526020600020905b815481526020019060010190808311610e59575b5050505050905090565b610e7f615784565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ed39190616464565b602060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f2591908101906161b8565b6110076040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ff45780601f10610fc957610100808354040283529160200191610ff4565b820191906000526020600020905b815481529060010190602001808311610fd757829003601f168201915b505050505061501690919063ffffffff16565b90151561104a576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016110419190616801565b60405180910390fd5b50611053615784565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28686866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110ab939291906164b6565b60206040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110fb91908101906161b8565b6111dd6040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111ca5780601f1061119f576101008083540402835291602001916111ca565b820191906000526020600020905b8154815290600101906020018083116111ad57829003601f168201915b505050505061501690919063ffffffff16565b901515611220576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016112179190616801565b60405180910390fd5b50611229615793565b73ffffffffffffffffffffffffffffffffffffffff166329bbf6386040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561128a57600080fd5b505afa15801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c2919081019061624b565b8282905011156113aa6040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113975780601f1061136c57610100808354040283529160200191611397565b820191906000526020600020905b81548152906001019060200180831161137a57829003601f168201915b505050505061501690919063ffffffff16565b9015156113ed576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016113e49190616801565b60405180910390fd5b506113f6615784565b73ffffffffffffffffffffffffffffffffffffffff16633a52a79686868686866040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114529594939291906164e8565b600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b505050505050505050565b6060611495615784565b73ffffffffffffffffffffffffffffffffffffffff16633eab5fba836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114e99190616464565b60006040518083038186803b15801561150157600080fd5b505afa158015611515573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061153e919081019061620a565b9050919050565b600061154f615784565b73ffffffffffffffffffffffffffffffffffffffff1663489b57666040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156115b057600080fd5b505afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115e8919081019061624b565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117466040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117335780601f1061170857610100808354040283529160200191611733565b820191906000526020600020905b81548152906001019060200180831161171657829003601f168201915b505050505061501690919063ffffffff16565b901515611789576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016117809190616801565b60405180910390fd5b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118019190616713565b60206040518083038186803b15801561181957600080fd5b505afa15801561182d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118519190810190615df3565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b6118d9615784565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161192d9190616464565b602060405180830381600087803b15801561194757600080fd5b505af115801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061197f91908101906161b8565b611a616040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a4e5780601f10611a2357610100808354040283529160200191611a4e565b820191906000526020600020905b815481529060010190602001808311611a3157829003601f168201915b505050505061501690919063ffffffff16565b901515611aa4576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611a9b9190616801565b60405180910390fd5b50611aad615784565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b05939291906164b6565b60206040518083038186803b158015611b1d57600080fd5b505afa158015611b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611b5591908101906161b8565b611c376040805190810160405280601781526020017f3a20757365722068617665206e6f207468652066696c6500000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c245780601f10611bf957610100808354040283529160200191611c24565b820191906000526020600020905b815481529060010190602001808311611c0757829003601f168201915b505050505061501690919063ffffffff16565b9015","","757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cf05780601f10612cc557610100808354040283529160200191612cf0565b820191906000526020600020905b815481529060010190602001808311612cd357829003601f168201915b505050505061501690919063ffffffff16565b901515612d46576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612d3d9190616801565b60405180910390fd5b50612d4f615784565b73ffffffffffffffffffffffffffffffffffffffff1663fcdce00184612d73615793565b73ffffffffffffffffffffffffffffffffffffffff1663dfde08506040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015612dd457600080fd5b505afa158015612de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612e0c919081019061624b565b85856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e49949392919061662f565b600060405180830381600087803b158015612e6357600080fd5b505af1158015612e77573d6000803e3d6000fd5b50505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612fb36040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612fa05780601f10612f7557610100808354040283529160200191612fa0565b820191906000526020600020905b815481529060010190602001808311612f8357829003601f168201915b505050505061501690919063ffffffff16565b901515612ff6576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612fed9190616801565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156130ee60606040519081016040528060218152602001616b056021913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130db5780601f106130b0576101008083540402835291602001916130db565b820191906000526020600020905b8154815290600101906020018083116130be57829003601f168201915b505050505061501690919063ffffffff16565b901515613131576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016131289190616801565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f14397a8aac1101859dac7252e4f8469991b3a9851ccfc8b48628f729e8f8a05a60405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6131fa615784565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161324e9190616464565b602060405180830381600087803b15801561326857600080fd5b505af115801561327c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506132a091908101906161b8565b6133826040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561336f5780601f106133445761010080835404028352916020019161336f565b820191906000526020600020905b81548152906001019060200180831161335257829003601f168201915b505050505061501690919063ffffffff16565b9015156133c5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016133bc9190616801565b60405180910390fd5b506133ce615793565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561342f57600080fd5b505afa158015613443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613467919081019061624b565b82829050111561354f6040805190810160405280601381526020017f3a20757365722065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561353c5780601f106135115761010080835404028352916020019161353c565b820191906000526020600020905b81548152906001019060200180831161351f57829003601f168201915b505050505061501690919063ffffffff16565b901515613592576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016135899190616801565b60405180910390fd5b5061359b615784565b73ffffffffffffffffffffffffffffffffffffffff1663977b65908484846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016135f3939291906164b6565b600060405180830381600087803b15801561360d57600080fd5b505af1158015613621573d6000803e3d6000fd5b50505050505050565b6060613634615784565b73ffffffffffffffffffffffffffffffffffffffff1663ab3da81c8585856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161368c939291906164b6565b60006040518083038186803b1580156136a457600080fd5b505afa1580156136b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506136e1919081019061620a565b90509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613718615784565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161376c9190616464565b602060405180830381600087803b15801561378657600080fd5b505af115801561379a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506137be91908101906161b8565b6138a06040805190810160405280601081526020017f3a2075736572206e6f742065786973740000000000000000000000000000000081525060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561388d5780601f106138625761010080835404028352916020019161388d565b820191906000526020600020905b81548152906001019060200180831161387057829003601f168201915b505050505061501690919063ffffffff16565b9015156138e3576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016138da9190616801565b60405180910390fd5b506138ec615784565b73ffffffffffffffffffffffffffffffffffffffff1663e5fb9235826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016139409190616464565b60206040518083038186803b15801561395857600080fd5b505afa15801561396c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613990919081019061624b565b600014613a756040805190810160405280601181526020017f3a2066696c6573206e6f7420656d70747900000000000000000000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a625780601f10613a3757610100808354040283529160200191613a62565b820191906000526020600020905b815481529060010190602001808311613a4557829003601f168201915b505050505061501690919063ffffffff16565b901515613ab8576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613aaf9190616801565b60405180910390fd5b50613ac1615784565b73ffffffffffffffffffffffffffffffffffffffff166380c2e0af826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613b159190616464565b600060405180830381600087803b158015613b2f57600080fd5b505af1158015613b43573d6000803e3d6000fd5b5050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000613b91615784565b73ffffffffffffffffffffffffffffffffffffffff1663c116b3ba836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613be59190616464565b602060405180830381600087803b158015613bff57600080fd5b505af1158015613c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613c3791908101906161b8565b9050","919050565b613c466150e2565b73ffffffffffffffffffffffffffffffffffffffff166356d592bd8383866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613c9e9392919061676d565b60206040518083038186803b158015613cb657600080fd5b505afa158015613cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613cee91908101906161b8565b1515613e99576000613cfe615784565b73ffffffffffffffffffffffffffffffffffffffff1663bfcef9e9856040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613d529190616464565b60206040518083038186803b158015613d6a57600080fd5b505afa158015613d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613da2919081019061624b565b9050613dac615784565b73ffffffffffffffffffffffffffffffffffffffff1663e4b760e985613ddc6001856157f390919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613e15929190616606565b600060405180830381600087803b158015613e2f57600080fd5b505af1158015613e43573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f45e753cf5e33480d22f1b8a971ba76fa905f565f7d0f11f59aee3a5abdd60ea48484604051613e8f929190616749565b60405180910390a2505b505050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f345780601f10613f0957610100808354040283529160200191613f34565b820191906000526020600020905b815481529060010190602001808311613f1757829003601f168201915b505050505081565b6000613f46615784565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401613f9a9190616464565b60206040518083038186803b158015613fb257600080fd5b505afa158015613fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250613fea919081019061624b565b9050919050565b60606000613ffd615784565b73ffffffffffffffffffffffffffffffffffffffff1663dd5e5c018686866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016140559392919061666f565b60006040518083038186803b15801561406d57600080fd5b505afa158015614081573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506140aa9190810190616164565b91509150935093915050565b6000841161419c6040805190810160405280600f81526020017f3a2073697a65206d757374203e2030000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141895780601f1061415e57610100808354040283529160200191614189565b820191906000526020600020905b81548152906001019060200180831161416c57829003601f168201915b505050505061501690919063ffffffff16565b9015156141df576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016141d69190616801565b60405180910390fd5b506141e8615793565b73ffffffffffffffffffffffffffffffffffffffff1663d2e8cfe86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561424957600080fd5b505afa15801561425d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614281919081019061624b565b8282905011156143696040805190810160405280601381526020017f3a2066696c652065787420746f6f206c6f6e670000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143565780601f1061432b57610100808354040283529160200191614356565b820191906000526020600020905b81548152906001019060200180831161433957829003601f168201915b505050505061501690919063ffffffff16565b9015156143ac576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016143a39190616801565b60405180910390fd5b506143b5615793565b73ffffffffffffffffffffffffffffffffffffffff16636cac89326040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561441657600080fd5b505afa15801561442a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061444e919081019061624b565b8686905011156145366040805190810160405280600e81526020017f3a2063696420746f6f206c6f6e6700000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156145235780601f106144f857610100808354040283529160200191614523565b820191906000526020600020905b81548152906001019060200180831161450657829003601f168201915b505050505061501690919063ffffffff16565b901515614579576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016145709190616801565b60405180910390fd5b50614582615784565b73ffffffffffffffffffffffffffffffffffffffff16639786acf28888886040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016145da939291906164b6565b60206040518083038186803b1580156145f257600080fd5b505afa158015614606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061462a91908101906161b8565b1561470d6040805190810160405280600c81526020017f3a2066696c65206578697374000000000000000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156146fa5780601f106146cf576101008083540402835291602001916146fa565b820191906000526020600020905b8154815290600101906020018083116146dd57829003601f168201915b505050505061501690919063ffffffff16565b901515614750576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016147479190616801565b60405180910390fd5b508361475a615784565b73ffffffffffffffffffffffffffffffffffffffff1663c54d1788896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016147ae9190616464565b60206040518083038186803b1580156147c657600080fd5b505afa1580156147da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506147fe919081019061624b565b10156148e26040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156148cf5780601f106148a4576101008083540402835291602001916148cf565b820191906000526020600020905b8154815290600101906020018083116148b257829003601f168201915b505050505061501690919063ffffffff16565b901515614925576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161491c9190616801565b60405180910390fd5b5061492e6157c3565b73ffffffffffffffffffffffffffffffffffffffff16637bf378c1886000898960405180838380828437808301925050509250505060405180910390206040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016149a59392919061647f565b600060405180830381600087803b1580156149bf57600080fd5b505af11580156149d3573d6000803e3d6000fd5b505050506149df6150e2565b73ffffffffffffffffffffffffffffffffffffffff16636ae64dee8787878b6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614a39949392919061679f565b600060405180830381600087803b158015614a5357600080fd5b505af1158015614a67573d6000803e3d6000fd5b50505050614a73615784565b73ffffffffffffffffffffffffffffffffffffffff1663c2a6d025888888878787426040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614ad39796959493929190616571565b600060405180830381600087803b158015614aed57600080fd5b505af1158015614b01573d6000803e3d6000fd5b5050505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614c416040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614c2e5780601f10614c0357610100808354040283529160200191614c2e565b820191906000526020600020905b815481529060010190602001808311614c1157829003601f168201915b5050505050615016909190","63ffffffff16565b901515614c84576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614c7b9190616801565b60405180910390fd5b5060008090505b600480549050811015614ddc576000600482815481101515614ca957fe5b90600052602060002001549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0c22a62826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401614d2d9190616713565b60206040518083038186803b158015614d4557600080fd5b505afa158015614d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250614d7d9190810190615df3565b6005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050614c8b565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614f126040805190810160405280601981526020017f3a2063616c6c6572206973206e6f7420746865206f776e65720000000000000081525060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614eff5780601f10614ed457610100808354040283529160200191614eff565b820191906000526020600020905b815481529060010190602001808311614ee257829003601f168201915b505050505061501690919063ffffffff16565b901515614f55576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401614f4c9190616801565b60405180910390fd5b508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f52aff5fa0f806e34ba57f9c78d4798c2aee3581f8b3f300dd69a30570494843260405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606082826040516020018083805190602001908083835b602083101515615052578051825260208201915060208101905060208303925061502d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b6020831015156150a55780518252602082019150602081019050602083039250615080565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052905092915050565b600061510d7f46696c650000000000000000000000000000000000000000000000000000000061584a565b905090565b600061511c615784565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016151709190616464565b60206040518083038186803b15801561518857600080fd5b505afa15801561519c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506151c0919081019061624b565b905060006151cc615784565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016152209190616464565b60206040518083038186803b15801561523857600080fd5b505afa15801561524c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615270919081019061624b565b905060008311801561529457508061529184846157f390919063ffffffff16565b11155b6153766040805190810160405280601281526020017f3a207370616365206e6f7420656e6f756768000000000000000000000000000081525060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156153635780601f1061533857610100808354040283529160200191615363565b820191906000526020600020905b81548152906001019060200180831161534657829003601f168201915b505050505061501690919063ffffffff16565b9015156153b9576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016153b09190616801565b60405180910390fd5b506153c2615784565b73ffffffffffffffffffffffffffffffffffffffff1663620d55f0856153f186866157f390919063ffffffff16565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161542a929190616606565b600060405180830381600087803b15801561544457600080fd5b505af1158015615458573d6000803e3d6000fd5b5050505050505050565b600061546c615784565b73ffffffffffffffffffffffffffffffffffffffff1663d0613a5f846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016154c09190616464565b60206040518083038186803b1580156154d857600080fd5b505afa1580156154ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250615510919081019061624b565b9050600061551c615784565b73ffffffffffffffffffffffffffffffffffffffff16637279e3cd856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016155709190616464565b60206040518083038186803b15801561558857600080fd5b505afa15801561559c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506155c0919081019061624b565b90506000831180156155d25750818311155b61569860606040519081016040528060248152602001616ae16024913960008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156156855780601f1061565a57610100808354040283529160200191615685565b820191906000526020600020905b81548152906001019060200180831161566857829003601f168201915b505050505061501690919063ffffffff16565b9015156156db576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016156d29190616801565b60405180910390fd5b506156e4615784565b73ffffffffffffffffffffffffffffffffffffffff1663620d55f0856157138686615a1290919063ffffffff16565b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161574c929190616606565b600060405180830381600087803b15801561576657600080fd5b505af115801561577a573d6000803e3d6000fd5b5050505050505050565b600061578e611d15565b905090565b60006157be7f53657474696e670000000000000000000000000000000000000000000000000061584a565b905090565b60006157ee7f486973746f72790000000000000000000000000000000000000000000000000061584a565b905090565b6000808284019050838110151515615840576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161583790616853565b60405180910390fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156159936040805190810160405280600a81526020017f3a204d697373696e6720000000000000000000000000000000000000000000008152508460008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561597f5780601f106159545761010080835404028352916020019161597f565b820191906000526020600020905b81548152906001019060200180831161596257829003601f168201915b5050505050615a5c9092919063ffffffff16565b9015156159d6576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016159cd9190616801565b60405180910390fd5b506005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000615a5483836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615b31565b905092915050565b60608383836040516020018084805190602001908083835b602083101515615a995780518252602082019150602081019050602083039250615a74565b6001836020036101000a03801982511681845116808217855250505050505090500183805190602001908083835b602083101515615aec5780518252602082019150602081019050602083039250615ac7565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001935050505060405160208183030381529060405290509392505050565b60008383111582901515615b7b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401615b729190616801565b60405180910390fd5b5060008385039050809150509392505050565b6000615b9a8235616a03565b905092915050565b6000615bae8251616a03565b905092915050565b600082601f8301121515615bc957600080fd5b8151615bdc615bd7826168bb565b61688e565b9150818183526020840193506020810190508360005b83811015615c225781518601615c088882615ca0565b845260208401935060208301925050600181019050615bf2565b5050505092915050565b6000615c388251616a15565b90","5092915050565b6000615c4c8235616a21565b905092915050565b60008083601f8401121515615c6857600080fd5b8235905067ffffffffffffffff811115615c8157600080fd5b602083019150836001820283011115615c9957600080fd5b9250929050565b600082601f8301121515615cb357600080fd5b8151615cc6615cc1826168e3565b61688e565b91508082526020830160208301858383011115615ce257600080fd5b615ced838284616a7a565b50505092915050565b600082601f8301121515615d0957600080fd5b8135615d1c615d178261690f565b61688e565b91508082526020830160208301858383011115615d3857600080fd5b615d43838284616a6b565b50505092915050565b600082601f8301121515615d5f57600080fd5b8151615d72615d6d8261690f565b61688e565b91508082526020830160208301858383011115615d8e57600080fd5b615d99838284616a7a565b50505092915050565b6000615dae8235616a2b565b905092915050565b6000615dc28251616a2b565b905092915050565b600060208284031215615ddc57600080fd5b6000615dea84828501615b8e565b91505092915050565b600060208284031215615e0557600080fd5b6000615e1384828501615ba2565b91505092915050565b60008060008060608587031215615e3257600080fd5b6000615e4087828801615b8e565b9450506020615e5187828801615b8e565b935050604085013567ffffffffffffffff811115615e6e57600080fd5b615e7a87828801615c54565b925092505092959194509250565b600080600060408486031215615e9d57600080fd5b6000615eab86828701615b8e565b935050602084013567ffffffffffffffff811115615ec857600080fd5b615ed486828701615c54565b92509250509250925092565b600080600080600060608688031215615ef857600080fd5b6000615f0688828901615b8e565b955050602086013567ffffffffffffffff811115615f2357600080fd5b615f2f88828901615c54565b9450945050604086013567ffffffffffffffff811115615f4e57600080fd5b615f5a88828901615c54565b92509250509295509295909350565b60008060008060608587031215615f7f57600080fd5b6000615f8d87828801615b8e565b945050602085013567ffffffffffffffff811115615faa57600080fd5b615fb687828801615c54565b93509350506040615fc987828801615da2565b91505092959194509250565b600080600080600080600060a0888a031215615ff057600080fd5b6000615ffe8a828b01615b8e565b975050602088013567ffffffffffffffff81111561601b57600080fd5b6160278a828b01615c54565b9650965050604061603a8a828b01615da2565b945050606061604b8a828b01615da2565b935050608088013567ffffffffffffffff81111561606857600080fd5b6160748a828b01615c54565b925092505092959891949750929550565b6000806040838503121561609857600080fd5b60006160a685828601615b8e565b925050602083013567ffffffffffffffff8111156160c357600080fd5b6160cf85828601615cf6565b9150509250929050565b600080604083850312156160ec57600080fd5b60006160fa85828601615b8e565b925050602061610b85828601615da2565b9150509250929050565b60008060006060848603121561612a57600080fd5b600061613886828701615b8e565b935050602061614986828701615da2565b925050604061615a86828701615da2565b9150509250925092565b6000806040838503121561617757600080fd5b600083015167ffffffffffffffff81111561619157600080fd5b61619d85828601615bb6565b92505060206161ae85828601615c2c565b9150509250929050565b6000602082840312156161ca57600080fd5b60006161d884828501615c2c565b91505092915050565b6000602082840312156161f357600080fd5b600061620184828501615c40565b91505092915050565b60006020828403121561621c57600080fd5b600082015167ffffffffffffffff81111561623657600080fd5b61624284828501615d4c565b91505092915050565b60006020828403121561625d57600080fd5b600061626b84828501615db6565b91505092915050565b61627d8161699b565b82525050565b600061628e82616955565b8084526020840193506162a08361693b565b60005b828110156162d2576162b686835161635b565b6162bf82616981565b91506020860195506001810190506162a3565b50849250505092915050565b60006162e982616960565b8084526020840193508360208202850161630285616948565b60005b8481101561633b57838303885261631d8383516163e8565b92506163288261698e565b9150602088019750600181019050616305565b508196508694505050505092915050565b616355816169ad565b82525050565b616364816169b9565b82525050565b61637381616a35565b82525050565b61638281616a59565b82525050565b600082845260208401935061639e838584616a6b565b6163a783616aad565b840190509392505050565b60006163bd82616976565b8084526163d1816020860160208601616a7a565b6163da81616aad565b602085010191505092915050565b60006163f38261696b565b808452616407816020860160208601616a7a565b61641081616aad565b602085010191505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b61645e816169f9565b82525050565b60006020820190506164796000830184616274565b92915050565b60006060820190506164946000830186616274565b6164a16020830185616379565b6164ae604083018461635b565b949350505050565b60006040820190506164cb6000830186616274565b81810360208301526164de818486616388565b9050949350505050565b60006060820190506164fd6000830188616274565b8181036020830152616510818688616388565b90508181036040830152616525818486616388565b90509695505050505050565b60006060820190506165466000830187616274565b8181036020830152616559818587616388565b90506165686040830184616455565b95945050505050565b600060a082019050616586600083018a616274565b818103602083015261659981888a616388565b90506165a86040830187616455565b81810360608301526165bb818587616388565b90506165ca6080830184616455565b98975050505050505050565b60006040820190506165eb6000830185616274565b81810360208301526165fd81846163b2565b90509392505050565b600060408201905061661b6000830185616274565b6166286020830184616455565b9392505050565b60006060820190506166446000830187616274565b6166516020830186616455565b8181036040830152616664818486616388565b905095945050505050565b60006060820190506166846000830186616274565b6166916020830185616455565b61669e6040830184616455565b949350505050565b600060208201905081810360008301526166c08184616283565b905092915050565b600060408201905081810360008301526166e281856162de565b90506166f1602083018461634c565b9392505050565b600060208201905061670d600083018461634c565b92915050565b6000602082019050616728600083018461635b565b92915050565b6000602082019050616743600083018461636a565b92915050565b60006020820190508181036000830152616764818486616388565b90509392505050565b60006040820190508181036000830152616788818587616388565b90506167976020830184616274565b949350505050565b600060608201905081810360008301526167ba818688616388565b90506167c96020830185616455565b6167d66040830184616274565b95945050505050565b600060208201905081810360008301526167f981846163e8565b905092915050565b6000602082019050818103600083015261681b81846163b2565b905092915050565b6000604082019050818103600083015261683d81856163b2565b905061684c6020830184616274565b9392505050565b6000602082019050818103600083015261686c8161641e565b9050919050565b60006020820190506168886000830184616455565b92915050565b6000604051905081810181811067ffffffffffffffff821117156168b157600080fd5b8060405250919050565b600067ffffffffffffffff8211156168d257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156168fa57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561692657600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b60006169a6826169d9565b9050919050565b60008115159050919050565b6000819050919050565b60006002821015156169d157fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000616a0e826169d9565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b6000616a4082616a47565b9050919050565b6000616a52826169d9565b9050919050565b6000616a64826169c3565b9050919050565b82818337600083830152505050565b60005b83811015616a98578082015181840152602081019050616a7d565b83811115616aa7576000848401525b50505050565b6000601f19601f830116905091905056fe3a2063616e206e6f74206c6974746c65207468616e2073746f726167652075736564667265652073697a652063616e206e6f7420626967207468616e20757365642073697a653a206e6577206d616e6167657220697320746865207a65726f2061646472657373a265627a7a7230582026ca1390a83905a37fa55205e6e401336b0516eef12553d69f2fddb01a8a26466c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"deleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getImports\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFailAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageUsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"size\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"addFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFinishDeleteFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUserNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"changeSpace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getStorageTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setFileExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ext\",\"type\":\"string\"}],\"name\":\"setExt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setFileDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"node\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"callbackFinishAddFile\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshCache\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\"},{\"name\":\"pageNumber\",\"type\":\"uint256\"}],\"name\":\"getCids\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileExt\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_resolver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileAddFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_RESOLVER = "resolver";

    public static final String FUNC_DELETEFILE = "deleteFile";

    public static final String FUNC_GETIMPORTS = "getImports";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_CALLBACKFAILADDFILE = "callbackFailAddFile";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETSTORAGEUSED = "getStorageUsed";

    public static final String FUNC_ADDFILE = "addFile";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETSTORAGE = "getStorage";

    public static final String FUNC_CALLBACKFINISHDELETEFILE = "callbackFinishDeleteFile";

    public static final String FUNC_GETTOTALUSERNUMBER = "getTotalUserNumber";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_EXIST = "exist";

    public static final String FUNC_DEREGISTER = "deRegister";

    public static final String FUNC_CHANGESPACE = "changeSpace";

    public static final String FUNC_CONTRACTNAME = "contractName";

    public static final String FUNC_GETSTORAGETOTAL = "getStorageTotal";

    public static final String FUNC_ADDADDRESS = "addAddress";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SETFILEEXT = "setFileExt";

    public static final String FUNC_SETSTORAGE = "setStorage";

    public static final String FUNC_SETEXT = "setExt";

    public static final String FUNC_SETFILEDURATION = "setFileDuration";

    public static final String FUNC_SETMANAGER = "setManager";

    public static final String FUNC_CALLBACKFINISHADDFILE = "callbackFinishAddFile";

    public static final String FUNC_REFRESHCACHE = "refreshCache";

    public static final String FUNC_GETCIDS = "getCids";

    public static final String FUNC_GETEXT = "getExt";

    public static final String FUNC_GETFILEEXT = "getFileExt";

    public static final String FUNC_GETFILEDURATION = "getFileDuration";

    public static final Event FILEADDED_EVENT = new Event("FileAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEADDFAILED_EVENT = new Event("FileAddFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event FILEDELETED_EVENT = new Event("FileDeleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event STORAGECHANGED_EVENT = new Event("StorageChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERCHANGED_EVENT = new Event("OwnerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event MANAGERCHANGED_EVENT = new Event("ManagerChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected User(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String resolver() throws ContractException {
        final Function function = new Function(FUNC_RESOLVER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt deleteFile(String addr, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deleteFile(String addr, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteFile(String addr, String cid) {
        final Function function = new Function(
                FUNC_DELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public List getImports() throws ContractException {
        final Function function = new Function(FUNC_GETIMPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt callbackFailAddFile(String owner, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFailAddFile(String owner, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFailAddFile(String owner, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCallbackFailAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFAILADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getAddress(byte[] name) throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageUsed(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGEUSED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addFile(String addr, String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addFile(String addr, String cid, BigInteger size, BigInteger duration, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFile(String addr, String cid, BigInteger size, BigInteger duration, String ext) {
        final Function function = new Function(
                FUNC_ADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, String> getAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public TransactionReceipt register(String addr, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] register(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String addr, String ext) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getStorage() throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt callbackFinishDeleteFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFinishDeleteFile(String owner, String node, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFinishDeleteFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCallbackFinishDeleteFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFINISHDELETEFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger getTotalUserNumber() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALUSERNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String manager() throws ContractException {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt exist(String addr) {
        final Function function = new Function(
                FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] exist(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForExist(String addr) {
        final Function function = new Function(
                FUNC_EXIST, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getExistInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getExistOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_EXIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deRegister(String addr) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] deRegister(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeRegister(String addr) {
        final Function function = new Function(
                FUNC_DEREGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DEREGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt changeSpace(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] changeSpace(String addr, BigInteger size, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeSpace(String addr, BigInteger size) {
        final Function function = new Function(
                FUNC_CHANGESPACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(size)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getChangeSpaceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGESPACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public String contractName() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTNAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getStorageTotal(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETSTORAGETOTAL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] addAddress(byte[] name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddAddress(byte[] name) {
        final Function function = new Function(
                FUNC_ADDADDRESS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getAddAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public String owner() throws ContractException {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setFileExt(String addr, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileExt(String addr, String cid, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileExt(String addr, String cid, String ext) {
        final Function function = new Function(
                FUNC_SETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSetFileExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setStorage(String value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStorage(String value) {
        final Function function = new Function(
                FUNC_SETSTORAGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStorageInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt setExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setExt(String addr, String ext, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetExt(String addr, String ext) {
        final Function function = new Function(
                FUNC_SETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(ext)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSetExtInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETEXT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt setFileDuration(String addr, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setFileDuration(String addr, String cid, BigInteger duration, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetFileDuration(String addr, String cid, BigInteger duration) {
        final Function function = new Function(
                FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSetFileDurationInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETFILEDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt setManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setManager(String _manager, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetManager(String _manager) {
        final Function function = new Function(
                FUNC_SETMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_manager)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt callbackFinishAddFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] callbackFinishAddFile(String owner, String node, String cid, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCallbackFinishAddFile(String owner, String node, String cid) {
        final Function function = new Function(
                FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(node), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCallbackFinishAddFileInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CALLBACKFINISHADDFILE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt refreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] refreshCache(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshCache() {
        final Function function = new Function(
                FUNC_REFRESHCACHE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<List<String>, Boolean> getCids(String addr, BigInteger pageSize, BigInteger pageNumber) throws ContractException {
        final Function function = new Function(FUNC_GETCIDS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageSize), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(pageNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Bool>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, Boolean>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                (Boolean) results.get(1).getValue());
    }

    public String getExt(String addr) throws ContractException {
        final Function function = new Function(FUNC_GETEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getFileExt(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEEXT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getFileDuration(String addr, String cid) throws ContractException {
        final Function function = new Function(FUNC_GETFILEDURATION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(cid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<FileAddedEventResponse> getFileAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDED_EVENT, transactionReceipt);
        ArrayList<FileAddedEventResponse> responses = new ArrayList<FileAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddedEventResponse typedResponse = new FileAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileAddFailedEventResponse> getFileAddFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEADDFAILED_EVENT, transactionReceipt);
        ArrayList<FileAddFailedEventResponse> responses = new ArrayList<FileAddFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileAddFailedEventResponse typedResponse = new FileAddFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileAddFailedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileAddFailedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEADDFAILED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FileDeletedEventResponse> getFileDeletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FILEDELETED_EVENT, transactionReceipt);
        ArrayList<FileDeletedEventResponse> responses = new ArrayList<FileDeletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FileDeletedEventResponse typedResponse = new FileDeletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cid = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFileDeletedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFileDeletedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FILEDELETED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<StorageChangedEventResponse> getStorageChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STORAGECHANGED_EVENT, transactionReceipt);
        ArrayList<StorageChangedEventResponse> responses = new ArrayList<StorageChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StorageChangedEventResponse typedResponse = new StorageChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeStorageChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeStorageChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(STORAGECHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<OwnerChangedEventResponse> getOwnerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERCHANGED_EVENT, transactionReceipt);
        ArrayList<OwnerChangedEventResponse> responses = new ArrayList<OwnerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnerChangedEventResponse typedResponse = new OwnerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeOwnerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeOwnerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(OWNERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ManagerChangedEventResponse> getManagerChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERCHANGED_EVENT, transactionReceipt);
        ArrayList<ManagerChangedEventResponse> responses = new ArrayList<ManagerChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerChangedEventResponse typedResponse = new ManagerChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValue = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newValue = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeManagerChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeManagerChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MANAGERCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static User load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new User(contractAddress, client, credential);
    }

    public static User deploy(Client client, CryptoKeyPair credential, String _resolver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_resolver)));
        return deploy(User.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class FileAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class FileAddFailedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class FileDeletedEventResponse {
        public TransactionReceipt.Logs log;

        public String owner;

        public String cid;
    }

    public static class StorageChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class OwnerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }

    public static class ManagerChangedEventResponse {
        public TransactionReceipt.Logs log;

        public String previousValue;

        public String newValue;
    }
}
